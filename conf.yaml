#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#


#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0

#
# The client section used by GO SDK.
#
client:

  organization: HUST

  logging:
    level: info


  cryptoconfig:    #指定密钥与证书的根目录
    path: /home/u/go/src/fixturesPIC/crypto-config

  credentialStore: #指定存储证书的所在目录

    path: "/tmp/state-store"

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:  #指定密钥存储库
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: /tmp/msp

  # [Optional] BCCSP config for the client. Used by GO SDK.
  BCCSP:          #为客户端配置BCCSP
    security:
      enabled: true
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      level: 256

  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: false   #是否使用系统证书池

    # [Optional]. Client key and cert for TLS handshake with peers and orderers
    client:                 #客户端密钥与证书路径（可选）
      key:
        path:
      cert:
        path:
channels:                   #配置通道信息
  # multi-org test channel
  hustgym:
    # anchor peers only for the bootstrap config is required, other org's peers will be discovered
    peers:
      peer0.HUST.test.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

    policies:
      queryChannelConfig:
        minResponses: 1
        maxTargets: 1
        retryOpts:
          attempts: 5
          initialBackoff: 500ms
          maxBackoff: 5s
          backoffFactor: 2.0

organizations:     #指定网络环境中的组织信息
  HUST:
    mspid: HUSTMSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/HUST.test.com/users/{username}@HUST.test.com/msp

    peers:
      - peer0.HUST.test.com

  orderer.test.com:
    # Membership Service Provider ID for this organization
    mspID: OrdererMSP

    # Needed to load users crypto keys and certs for this org (absolute path or relative to global crypto path, DEV mode)
    cryptoPath: ordererOrganizations/test.com/users/{username}@test.com/msp

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  # defining bootstrap peers only
  peer0.HUST.test.com:
    # [Optional] Default: Infer from hostname
    url: localhost:7051
    eventUrl: localhost:7053

    grpcOptions:
      ssl-target-name-override: peer0.HUST.test.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false

    tlsCACerts:
      path: /home/u/go/src/fixturesPIC/crypto-config/peerOrganizations/HUST.test.com/tlsca/tlsca.HUST.test.com-cert.pem

# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  # needed to fetch the ordrerer config for create channel
  orderer.test.com:
    # [Optional] Default: Infer from hostname
    #url: orderer.hlexample.com:7050
    url: localhost:7050
    grpcOptions:
      ssl-target-name-override: orderer.test.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false

    tlsCACerts:
      path: /home/u/go/src/fixturesPIC/crypto-config/ordererOrganizations/test.com/tlsca/tlsca.test.com-cert.pem


  # EntityMatchers enable substitution of network hostnames with static configurations
  # so that properties can be mapped. Regex can be used for this purpose
  # UrlSubstitutionExp can be empty which means the same network hostname will be used
  # UrlSubstitutionExp can be given same as mapped peer url, so that mapped peer url can be used
  # UrlSubstitutionExp can have golang regex matchers like ${1}.local.example.${2}:${3} for pattern
  # like peer0.org1.example.com:1234 which converts peer0.org1.example.com to peer0.org1.local.example.com:1234
  # sslTargetOverrideUrlSubstitutionExp follow in the same lines as
  # SubstitutionExp for the fields gprcOptions.ssl-target-name-override respectively
# In any case mappedHost's config will be used, so mapped host cannot be empty, if entityMatchers are used

entityMatchers:

  orderer:
    - pattern: (\w*)orderer.test.com(\w*)
      urlSubstitutionExp: localhost:7050
      sslTargetOverrideUrlSubstitutionExp: orderer.test.com
      mappedHost: orderer.test.com
  peer:
    # the below matcher will allow dynamic discovery to use the anchor peer (peer0.org1.example.com)
    # as a template for all org1 discovered peers config
    - pattern: (\w*)peer0.HUST.test.com(\w*)
      urlSubstitutionExp: localhost:7051
      eventUrlSubstitutionExp: localhost:7053
      sslTargetOverrideUrlSubstitutionExp: peer0.HUST.test.com
      mappedHost: peer0.HUST.test.com

